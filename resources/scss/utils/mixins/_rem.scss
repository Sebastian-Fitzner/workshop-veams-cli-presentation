/******************************************

	rem mixin

******************************************/
//
// 'rem' is a Sass mixin that converts pixel values to rem values for whatever property is passed to it.
// It returns two lines of code, one of the regular pixel values (for IE), and another with the
// converted rem values (for everyone else). Special thanks to Chris Epstein (http://chriseppstein.github.com)
// and Martin Bavio (http://martinbavio.com) for the help and code!
//
// Sample input:
// .element {
//     @include rem('padding', 10px 0 2px 5px);
// }
//
// Sample output:
// .element {
//     padding: 10px 0 2px 5px;
//     padding: 1rem 0 0.2rem 0.5rem;
// }
//
// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
//

$baseline_px: 10px;

@mixin rem($property, $px_values) {
	// Convert the baseline into rems
	$baseline_rem: $baseline_px / 1rem;
	// Print the first line in pixel values
	#{$property}: $px_values;
	// If there is only one (numeric) value, return the property/value line for it.
	@if type-of($px_values) == "number" {
		#{$property}: $px_values / $baseline_rem;
	} @else {
		// Create an empty list that we can dump values into
		$rem_values: ();
		@each $value in $px_values {
			// If the value is zero, return 0
			@if $value == 0 {
				$rem_values: append($rem_values, $value);
			} @else {
				$rem_values: append($rem_values, $value / $baseline_rem);
			}
		}
		// Return the property and its list of converted values
		#{$property}: $rem_values;
	}
}

/******************************************

	% (percent) mixin

******************************************/

// converts pixel into percentage based on a context width (or var)
//
// Sample input:
// .element {
//     @include cp('padding',10px 0 2px 5px, 980px);
// }
//
// Sample output:
// .element {
//     padding: 1.02041% 0 0.204082% 0.510204%; // 10px 0 2px 5px
// }
//
// neccessary unitless function to prevent sass errors in calculation
//

// Turn numbers with units into unitless numbers (https://github.com/nex3/sass/issues/533)
@function clear-units($value) {
	@if type-of($value) == "number" {
		@if unitless($value) {
			@return $value;
		} @else if unit($value) == "em" {
			@return $value / 1em;
		} @else if unit($value) == "px" {
			@return $value / 1px;
		} @else if unit($value) == "pt" {
			@return $value / 1pt;
		}
	} @else {
		@warn "Not a number value: #{$value}";
		@return $value;
	}
}